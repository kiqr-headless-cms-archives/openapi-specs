---
openapi: 3.0.1
info:
  title: Management API
  description: Management API for KIQR Headless CMS
  version: 0.15.2
paths:
  "/environments/{environment_id}/resources":
    get:
      summary: List resources for an environment
      tags:
      - Resources
      operationId: getResources
      security:
      - oauth2: []
      parameters:
      - name: page
        in: query
        required: false
        schema:
          type: number
      - name: environment_id
        in: path
        required: true
        schema:
          type: string
      - name: content_type
        in: query
        required: false
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: filtered by content type
          headers:
            Current-Page:
              schema:
                type: integer
            Page-Items:
              schema:
                type: integer
            Total-Count:
              schema:
                type: integer
            Total-Pages:
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Resource"
    post:
      summary: Create a resource
      tags:
      - Resources
      operationId: createResource
      security:
      - oauth2: []
      parameters:
      - name: environment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '201':
          description: create a resource
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Resource"
        '422':
          description: with validation errors
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                slug:
                  type: string
                content:
                  type: object
                content_type:
                  type: string
              required:
              - name
              - content_type
        required: true
  "/environments/{environment_id}/resources/{id}":
    get:
      summary: Get a resource
      tags:
      - Resources
      operationId: getResource
      security:
      - oauth2: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: environment_id
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: false
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: returns an older version
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Resource"
    patch:
      summary: Update a resource
      tags:
      - Resources
      operationId: updateResource
      security:
      - oauth2: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: environment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: returns the updated resource
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Resource"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                slug:
                  type: string
                content:
                  type: object
              required: []
    delete:
      summary: Delete a resource
      tags:
      - Resources
      operationId: deleteResource
      security:
      - oauth2: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: environment_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '204':
          description: delete a resource
  "/environments/{environment_id}/resources/{id}/versions":
    get:
      summary: Get resource versions
      tags:
      - Resources
      operationId: getResourceVersions
      security:
      - oauth2: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: environment_id
        in: path
        required: true
        schema:
          type: string
      - name: version
        in: query
        required: false
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: returns a list with resources
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Resource"
  "/environments":
    get:
      summary: List the current user's available environments
      tags:
      - Environments
      operationId: getEnvironments
      security:
      - oauth2: []
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: returns a list of environments
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Environment"
  "/projects/{project_id}/schemas":
    get:
      summary: List project schemas
      tags:
      - Schemas
      operationId: getSchemas
      security:
      - oauth2: []
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: returns a list of schemas
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Schema"
    post:
      summary: Create a schema
      tags:
      - Schemas
      operationId: createSchema
      security:
      - oauth2: []
      parameters:
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      - name: last_schema_version
        in: query
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '201':
          description: with empty content types
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Schema"
        '409':
          description: with conflicting version number
        '422':
          description: with invalid field
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
                data:
                  type: object
              required:
              - message
              - data
  "/projects/{project_id}/schemas/{id}":
    get:
      summary: Get a schema
      tags:
      - Schemas
      operationId: getSchema
      security:
      - oauth2: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: project_id
        in: path
        required: true
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: get by ID
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/SchemaExtended"
  "/projects":
    get:
      summary: List the current user's available projects
      tags:
      - Projects
      operationId: getProjects
      security:
      - oauth2: []
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: returns a list of projects
          content:
            application/json:
              schema:
                type: array
                items:
                  "$ref": "#/components/schemas/Project"
    post:
      summary: Create a project
      tags:
      - Projects
      operationId: createProject
      security:
      - oauth2: []
      parameters: []
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '201':
          description: returns a project
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
        '422':
          description: validation failed
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
              required:
              - name
  "/projects/{id}":
    get:
      summary: Get a project
      tags:
      - Projects
      operationId: getProject
      security:
      - oauth2: []
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: get by SLUG
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/Project"
  "/user":
    get:
      summary: Retrieve information about the signed in user.
      tags:
      - User
      security:
      - oauth2: []
      operationId: getUser
      responses:
        '401':
          description: returns 401 forbidden if unauthenticated
        '200':
          description: returns the current authenticated user
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/User"
servers:
- url: https://management-api.kiqr.cloud/v1
components:
  securitySchemes:
    oauth2:
      type: oauth2
      in: header
      name: Authorization
      flows:
        implicit:
          authorizationUrl: https://kiqr.cloud/oauth/authorize
          tokenUrl: https://kiqr.cloud/oauth/token
          scopes:
            profile: Access user profile
  schemas:
    User:
      type: object
      required:
      - id
      - name
      - email
      - avatar_url
      - updated_at
      - created_at
      properties:
        id:
          type: string
          format: uuid
          example: 247978105417915195
        name:
          type: string
          example: John Doe
        email:
          type: string
          example: john.doe@mail.com
        avatar_url:
          type: string
          example: https://avatars.dicebear.com/api/identicon/avatar.svg
        updated_at:
          type: number
          example: 1661635065
        created_at:
          type: number
          example: 1661635065
    Project:
      type: object
      required:
      - id
      - name
      - slug
      - environments_count
      - schemas_count
      - updated_at
      - created_at
      properties:
        id:
          type: string
          format: uuid
          example: 345145357946791
        name:
          type: string
          example: Example.com website
        slug:
          type: string
          example: example-com
        environments_count:
          type: number
          example: 3
        schemas_count:
          type: number
          example: 18
        updated_at:
          type: number
          example: 1661635065
        created_at:
          type: number
          example: 1661635065
    Schema:
      type: object
      required:
      - id
      - version
      - message
      - project_id
      - user_id
      - updated_at
      - created_at
      properties:
        id:
          type: string
          format: uuid
          example: 345145357946791
        version:
          type: number
          example: 27
        message:
          type: string
          example: Created a content type for blog posts
        project_id:
          type: string
          format: uuid
          example: 345145357946791
        user_id:
          type: string
          format: uuid
          example: 345145357946791
        updated_at:
          type: number
          example: 1661635065
        created_at:
          type: number
          example: 1661635065
    SchemaExtended:
      type: object
      required:
      - id
      - data
      - version
      - message
      - project_id
      - user_id
      - updated_at
      - created_at
      properties:
        id:
          type: string
          format: uuid
          example: 345145357946791
        version:
          type: number
          example: 27
        message:
          type: string
          example: Created a content type for blog posts
        project_id:
          type: string
          format: uuid
          example: 345145357946791
        user_id:
          type: string
          format: uuid
          example: 345145357946791
        updated_at:
          type: number
          example: 1661635065
        created_at:
          type: number
          example: 1661635065
        data:
          "$ref": "#/components/schemas/SchemaExtendedData"
    SchemaExtendedData:
      type: object
      properties:
        content_types:
          type: array
          items:
            "$ref": "#/components/schemas/ContentType"
      required:
      - content_types
    ContentType:
      type: object
      properties:
        id:
          type: string
          minLength: 3
          maxLength: 30
        name:
          type: string
          minLength: 3
          maxLength: 30
        kind:
          type: string
          enum:
          - collection
          - component
        associations:
          type: array
          items:
            "$ref": "#/components/schemas/ContentTypeAssociation"
        fields:
          type: array
          items:
            "$ref": "#/components/schemas/ContentTypeField"
      required:
      - id
      - name
      - kind
      - associations
      - fields
      additionalProperties: false
    ContentTypeAssociation:
      type: object
      properties:
        id:
          type: string
          minLength: 3
          maxLength: 30
        label:
          type: string
          minLength: 3
          maxLength: 30
        to:
          type: string
          minLength: 3
          maxLength: 30
      required:
      - id
      - label
      - to
      additionalProperties: false
    ContentTypeField:
      type: object
      properties:
        id:
          type: string
          minLength: 3
          maxLength: 30
        label:
          type: string
          minLength: 3
          maxLength: 30
        type:
          type: string
          enum:
          - string
          - text
        required:
          type: boolean
      required:
      - id
      - label
      - type
      - required
      additionalProperties: false
    Environment:
      type: object
      required:
      - id
      - name
      - slug
      - project_id
      - schema_id
      - updated_at
      - created_at
      properties:
        id:
          type: string
          format: uuid
          example: 345145357946791
        project_id:
          type: string
          format: uuid
          example: 345145357946791
        schema_id:
          type: string
          format: uuid
          example: 345145357946791
        name:
          type: string
          example: Development
        slug:
          type: string
          example: development
        promote_new_schemas:
          type: boolean
          example: true
        updated_at:
          type: number
          example: 1661635065
        created_at:
          type: number
          example: 1661635065
    Resource:
      type: object
      required:
      - id
      - name
      - slug
      - project_id
      - environment_id
      - name
      - slug
      - content_type
      - content
      - version
      - versions_count
      - updated_at
      - created_at
      properties:
        id:
          type: string
          format: uuid
          example: 345145357946791
        project_id:
          type: string
          format: uuid
          example: 345145357946791
        environment_id:
          type: string
          format: uuid
          example: 345145357946791
        name:
          type: string
          example: My first post
        slug:
          type: string
          example: my-first-post
        content_type:
          type: string
          example: posts
        content:
          "$ref": "#/components/schemas/ResourceContent"
        version:
          type: number
          example: 3
        versions_count:
          type: number
          example: 3
        updated_at:
          type: number
          example: 1661635065
        created_at:
          type: number
          example: 1661635065
      additionalProperties: false
    ResourceContent:
      type: object
